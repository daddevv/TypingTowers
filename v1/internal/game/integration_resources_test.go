//go:build test

package game

// import "testing"

// // TestResourcesAccumulation simulates several minutes to ensure resources grow.
// // TestResourcesAccumulation steps the game for three minutes of simulated time
// // using the headless Step helper. Resources generated by the Farmer,
// // Lumberjack and Miner should accumulate over the course of the simulation.
// func TestResourcesAccumulation(t *testing.T) {
// 	g := NewGame()      // use default configuration
// 	inp := &mockInput{} // deterministic input for testing
// 	g.input = inp

// 	const dt = 0.1         // simulation step size in seconds
// 	steps := int(180 / dt) // total steps for three minutes
// 	for i := 0; i < steps; i++ {
// 		if w, ok := g.Queue().Peek(); ok {
// 			inp.typed = []rune(w.Text)
// 		}
// 		if err := g.Step(dt); err != nil {
// 			t.Fatal(err)
// 		}
// 	}

// 	// verify all primary resources increased from zero
// 	if g.resources.GoldAmount() <= 0 {
// 		t.Fatalf("expected gold to accumulate")
// 	}
// 	if g.resources.WoodAmount() <= 0 {
// 		t.Fatalf("expected wood to accumulate")
// 	}
// 	if g.resources.StoneAmount() <= 0 {
// 		t.Fatalf("expected stone to accumulate")
// 	}
// 	if g.resources.IronAmount() <= 0 {
// 		t.Fatalf("expected iron to accumulate")
// 	}
// 	if g.resources.FoodAmount() <= 0 {
// 		t.Fatalf("expected food to accumulate")
// 	}
// }
